{"schemaVersion":{"minor":2,"major":0,"patch":0},"primaryContentSections":[{"kind":"declarations","declarations":[{"languages":["swift"],"tokens":[{"kind":"keyword","text":"init"},{"kind":"text","text":"()"}],"platforms":["Linux"]}]}],"sections":[],"abstract":[{"text":"No overview available.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline"]]},"kind":"symbol","variants":[{"paths":["\/documentation\/parsing\/newline\/init()-93ai6"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"conformance":{"conformancePrefix":[{"type":"text","text":"Conforms when"}],"availabilityPrefix":[{"type":"text","text":"Available when"}],"constraints":[{"type":"codeVoice","code":"Input"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":" and "},{"type":"codeVoice","code":"Bytes"},{"type":"text","text":" is "},{"type":"codeVoice","code":"ArraySlice<UTF8.CodeUnit>"},{"type":"text","text":"."}]},"extendedModule":"Parsing","modules":[{"name":"Parsing"}],"symbolKind":"init","externalID":"s:7Parsing7NewlineVAAs10ArraySliceVys5UInt8VGRszAHRs_rlEACyA2HGycfc","role":"symbol","title":"init()","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"()"}],"roleHeading":"Initializer"},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-93ai6","interfaceLanguage":"swift"},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"navigatorTitle":[{"text":"Newline","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/newline","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","abstract":[{"text":"A parser that consumes a single newline from the beginning of the input.","type":"text"}],"title":"Newline","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","kind":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","role":"collection","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Newline/init()-93ai6":{"conformance":{"availabilityPrefix":[{"text":"Available when","type":"text"}],"constraints":[{"code":"Input","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"ArraySlice<UTF8.CodeUnit>","type":"codeVoice"},{"text":" and ","type":"text"},{"code":"Bytes","type":"codeVoice"},{"text":" is ","type":"text"},{"code":"ArraySlice<UTF8.CodeUnit>","type":"codeVoice"},{"type":"text","text":"."}],"conformancePrefix":[{"text":"Conforms when","type":"text"}]},"fragments":[{"text":"init","kind":"identifier"},{"text":"()","kind":"text"}],"abstract":[],"type":"topic","kind":"symbol","role":"symbol","title":"init()","url":"\/documentation\/parsing\/newline\/init()-93ai6","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline\/init()-93ai6"}}}