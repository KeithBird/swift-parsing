{"sections":[],"kind":"symbol","relationshipsSections":[{"title":"Conforms To","kind":"relationships","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"type":"conformsTo"}],"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally"},"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/init(_:)"],"title":"Initializers"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/wrapped"],"title":"Instance Properties"},{"title":"Instance Methods","identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/parse(_:)"]},{"title":"Default Implementations","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/Parser-Implementations"]}],"abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"type":"codeVoice","code":"nil"},{"text":" if it fails.","type":"text"}],"primaryContentSections":[{"kind":"declarations","declarations":[{"tokens":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"},{"text":"<","kind":"text"},{"text":"Wrapped","kind":"genericParameter"},{"text":"> ","kind":"text"},{"text":"where","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"},{"text":" : ","kind":"text"},{"text":"Parser","kind":"typeIdentifier","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","preciseIdentifier":"s:7Parsing6ParserP"}],"languages":["swift"],"platforms":["Linux"]}]},{"kind":"content","content":[{"type":"heading","text":"Overview","level":2,"anchor":"overview"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Use this parser when you are parsing into an output data model that contains "},{"code":"nil","type":"codeVoice"},{"type":"text","text":"."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"When the wrapped parser fails "},{"type":"reference","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","isActive":true},{"type":"text","text":" will backtrack any consumption of the input so"},{"type":"text","text":" "},{"type":"text","text":"that later parsers can attempt to parser the input:"}]},{"syntax":"swift","type":"codeListing","code":["let parser = Parse {","  \"Hello,\"","  Optionally { \" \"; Bool.parser() }","  \" world!\"","}","","try parser.parse(\"Hello, world!\")      \/\/ nil 1️⃣","try parser.parse(\"Hello, true world!\") \/\/ true"]},{"type":"paragraph","inlineContent":[{"text":"If ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","isActive":true,"type":"reference"},{"text":" did not backtrack then 1️⃣ would fail because it would consume a space,","type":"text"},{"text":" ","type":"text"},{"text":"causing the ","type":"text"},{"type":"codeVoice","code":"\" world!\""},{"text":" parser to fail since there is no longer any space to consume.","type":"text"},{"text":" ","type":"text"},{"text":"Read the article ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","isActive":true,"type":"reference"},{"text":" to learn more about how backtracking works.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"If you are optionally parsing input that should coalesce into some default, you can skip the","type":"text"},{"text":" ","type":"text"},{"text":"optionality and instead use ","type":"text"},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/replaceError(with:)","isActive":true,"type":"reference"},{"text":" with a default:","type":"text"}]},{"syntax":"swift","type":"codeListing","code":["Optionally { Int.parser() }","  .map { $0 ?? 0 }","","\/\/ vs.","","Int.parser()","  .replaceError(with: 0)"]}]}],"variants":[{"paths":["\/documentation\/parsing\/optionally"],"traits":[{"interfaceLanguage":"swift"}]}],"metadata":{"externalID":"s:7Parsing10OptionallyV","role":"symbol","roleHeading":"Structure","symbolKind":"struct","title":"Optionally","modules":[{"name":"Parsing"}],"fragments":[{"text":"struct","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"Optionally"}],"navigatorTitle":[{"kind":"identifier","text":"Optionally"}]},"seeAlsoSections":[{"title":"Common parsers","generated":true,"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Double","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream"]}],"schemaVersion":{"major":0,"patch":0,"minor":2},"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"]]},"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Newline":{"navigatorTitle":[{"text":"Newline","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/newline","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Newline","abstract":[{"text":"A parser that consumes a single newline from the beginning of the input.","type":"text"}],"title":"Newline","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Newline","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","kind":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic","kind":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"title":"Parse","role":"symbol","url":"\/documentation\/parsing\/parse","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Bool":{"kind":"article","role":"article","url":"\/documentation\/parsing\/bool","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Bool","abstract":[{"text":"A parser that consumes a Boolean value from the beginning of a string.","type":"text"}],"title":"Bool","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Float":{"kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Float","url":"\/documentation\/parsing\/float","type":"topic","abstract":[{"text":"A parser that consumes a float from the beginning of a string.","type":"text"}],"role":"article","title":"Float"},"doc://co.pointfree.Parsing/documentation/Parsing/Always":{"navigatorTitle":[{"text":"Always","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/always","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Always","abstract":[{"text":"A parser that always succeeds with the given value, and does not consume any input.","type":"text"}],"title":"Always","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Always","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"kind":"article","role":"article","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unnecessary."}],"title":"Backtracking","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/FromUnicodeScalarView":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUnicodeScalarView","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromUnicodeScalarView","kind":"identifier"}],"title":"FromUnicodeScalarView","type":"topic","abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"code":"Substring.UnicodeScalarView","type":"codeVoice"},{"text":" into a parser on another","type":"text"},{"text":" ","type":"text"},{"text":"view.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/fromunicodescalarview","navigatorTitle":[{"text":"FromUnicodeScalarView","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/End":{"navigatorTitle":[{"text":"End","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/end","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/End","abstract":[{"text":"A parser that succeeds if the input is empty, and fails otherwise.","type":"text"}],"title":"End","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"End","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/AnyParser":{"kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/AnyParser","url":"\/documentation\/parsing\/anyparser","type":"topic","abstract":[{"text":"A type-erased parser of ","type":"text"},{"code":"Output","type":"codeVoice"},{"text":" from ","type":"text"},{"code":"Input","type":"codeVoice"},{"text":".","type":"text"}],"role":"symbol","title":"AnyParser","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"AnyParser","kind":"identifier"}],"navigatorTitle":[{"text":"AnyParser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/FromUTF8View":{"type":"topic","abstract":[],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"FromUTF8View","kind":"identifier"}],"url":"\/documentation\/parsing\/fromutf8view","title":"FromUTF8View","kind":"symbol","role":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromUTF8View","navigatorTitle":[{"kind":"identifier","text":"FromUTF8View"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally/Parser-Implementations":{"kind":"article","role":"collectionGroup","url":"\/documentation\/parsing\/optionally\/parser-implementations","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/Parser-Implementations","abstract":[],"title":"Parser Implementations","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally/wrapped":{"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/optionally\/wrapped","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/wrapped","abstract":[],"title":"wrapped","type":"topic","fragments":[{"text":"let","kind":"keyword"},{"text":" ","kind":"text"},{"text":"wrapped","kind":"identifier"},{"text":": ","kind":"text"},{"text":"Wrapped","kind":"typeIdentifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Prefix":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Prefix"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Prefix","title":"Prefix","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input."}],"navigatorTitle":[{"kind":"identifier","text":"Prefix"}],"url":"\/documentation\/parsing\/prefix"},"doc://co.pointfree.Parsing/documentation/Parsing/First":{"abstract":[{"type":"text","text":"A parser that consumes the first element from a collection."}],"title":"First","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/First","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"First"}],"navigatorTitle":[{"kind":"identifier","text":"First"}],"url":"\/documentation\/parsing\/first"},"doc://co.pointfree.Parsing/documentation/Parsing/Skip":{"navigatorTitle":[{"text":"Skip","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/skip","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Skip","abstract":[{"text":"A parser that discards the output of another parser.","type":"text"}],"title":"Skip","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Skip","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Double":{"abstract":[{"type":"text","text":"A parser that consumes a double from the beginning of a string."}],"title":"Double","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Double","url":"\/documentation\/parsing\/double"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally/replaceError(with:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/optionally\/replaceerror(with:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/replaceError(with:)","abstract":[{"text":"A parser that replaces its error with a provided output.","type":"text"}],"title":"replaceError(with:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"replaceError","kind":"identifier"},{"text":"(","kind":"text"},{"text":"with","kind":"externalParam"},{"text":": ","kind":"text"},{"text":"Self","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":") -> ","kind":"text"},{"text":"Parsers","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO"},{"text":".","kind":"text"},{"text":"ReplaceError","kind":"typeIdentifier","preciseIdentifier":"s:7Parsing7ParsersO12ReplaceErrorV"},{"kind":"text","text":"<"},{"kind":"typeIdentifier","text":"Self"},{"kind":"text","text":">"}]},"doc://co.pointfree.Parsing/documentation/Parsing/String":{"abstract":[{"type":"text","text":"A parser that consumes a string literal from the beginning of a string."}],"title":"String","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/String","url":"\/documentation\/parsing\/string"},"doc://co.pointfree.Parsing/documentation/Parsing/Many":{"navigatorTitle":[{"text":"Many","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/many","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Many","abstract":[{"text":"A parser that attempts to run another parser as many times as specified, accumulating the result","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"of the outputs."}],"title":"Many","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Many","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy":{"abstract":[{"type":"text","text":"A parser that waits for a call to its "},{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","isActive":true,"type":"reference"},{"type":"text","text":" method before running the given closure to"},{"type":"text","text":" "},{"type":"text","text":"create a parser for the given input."}],"title":"Lazy","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Lazy","kind":"identifier"}],"navigatorTitle":[{"text":"Lazy","kind":"identifier"}],"url":"\/documentation\/parsing\/lazy"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixUpTo":{"navigatorTitle":[{"text":"PrefixUpTo","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/prefixupto","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixUpTo","abstract":[{"text":"A parser that consumes a subsequence from the beginning of its input up to a given sequence of","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"elements."}],"title":"PrefixUpTo","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixUpTo","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Not":{"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Not","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Not","title":"Not","kind":"symbol","type":"topic","role":"symbol","abstract":[{"text":"A parser that succeeds if the given parser fails, and does not consume any input.","type":"text"}],"navigatorTitle":[{"text":"Not","kind":"identifier"}],"url":"\/documentation\/parsing\/not"},"doc://co.pointfree.Parsing/documentation/Parsing/Int":{"abstract":[{"type":"text","text":"A parser that consumes an integer (with an optional leading "},{"code":"+","type":"codeVoice"},{"type":"text","text":" or "},{"type":"codeVoice","code":"-"},{"type":"text","text":" sign) from the beginning of"},{"type":"text","text":" "},{"type":"text","text":"a string."}],"title":"Int","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Int","url":"\/documentation\/parsing\/int"},"doc://co.pointfree.Parsing/documentation/Parsing/Stream":{"navigatorTitle":[{"text":"Stream","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/stream","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Stream","abstract":[{"text":"A parser that can parse streams of input.","type":"text"}],"title":"Stream","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Stream","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","role":"collection","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/FromSubstring":{"abstract":[{"type":"text","text":"A parser that transforms a parser on "},{"code":"Substring","type":"codeVoice"},{"type":"text","text":" into a parser on another view."}],"navigatorTitle":[{"text":"FromSubstring","kind":"identifier"}],"role":"symbol","type":"topic","title":"FromSubstring","url":"\/documentation\/parsing\/fromsubstring","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/FromSubstring","fragments":[{"kind":"keyword","text":"struct"},{"text":" ","kind":"text"},{"text":"FromSubstring","kind":"identifier"}],"kind":"symbol"},"doc://co.pointfree.Parsing/documentation/Parsing/StartsWith":{"navigatorTitle":[{"text":"StartsWith","kind":"identifier"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StartsWith","role":"symbol","kind":"symbol","url":"\/documentation\/parsing\/startswith","abstract":[{"text":"A parser that parses a sequence of elements from its input.","type":"text"}],"type":"topic","title":"StartsWith","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"StartsWith","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/CharacterSet":{"abstract":[{"type":"text","text":"A parser that consumes the characters contained in a "},{"code":"CharacterSet","type":"codeVoice"},{"type":"text","text":" from the beginning of a string."}],"title":"CharacterSet","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/CharacterSet","url":"\/documentation\/parsing\/characterset"},"doc://co.pointfree.Parsing/documentation/Parsing/Rest":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Rest","role":"symbol","fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Rest"}],"title":"Rest","type":"topic","abstract":[{"text":"A parser that consumes everything to the end of the collection and returns this subsequence as","type":"text"},{"text":" ","type":"text"},{"text":"its output.","type":"text"}],"kind":"symbol","url":"\/documentation\/parsing\/rest","navigatorTitle":[{"kind":"identifier","text":"Rest"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally":{"navigatorTitle":[{"text":"Optionally","kind":"identifier"}],"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/optionally","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally","abstract":[{"text":"A parser that runs the given parser and succeeds with ","type":"text"},{"code":"nil","type":"codeVoice"},{"type":"text","text":" if it fails."}],"title":"Optionally","type":"topic","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Optionally","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally/init(_:)":{"abstract":[],"title":"init(_:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/init(_:)","fragments":[{"kind":"identifier","text":"init"},{"kind":"text","text":"(() -> "},{"text":"Wrapped","kind":"typeIdentifier"},{"text":")","kind":"text"}],"url":"\/documentation\/parsing\/optionally\/init(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Lazy/parse(_:)":{"kind":"symbol","role":"symbol","url":"\/documentation\/parsing\/lazy\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Lazy\/parse(_:)","abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"title":"parse(_:)","type":"topic","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"LazyParser","kind":"typeIdentifier"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") "},{"kind":"keyword","text":"rethrows"},{"kind":"text","text":" -> "},{"kind":"typeIdentifier","text":"LazyParser"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Peek":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"Peek"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Peek","title":"Peek","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A parser that runs the given parser, but does not consume any input."}],"navigatorTitle":[{"kind":"identifier","text":"Peek"}],"url":"\/documentation\/parsing\/peek"},"doc://co.pointfree.Parsing/documentation/Parsing/PrefixThrough":{"abstract":[{"type":"text","text":"A parser that consumes a subsequence from the beginning of its input through a given sequence of"},{"type":"text","text":" "},{"type":"text","text":"elements."}],"title":"PrefixThrough","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/PrefixThrough","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"PrefixThrough","kind":"identifier"}],"navigatorTitle":[{"text":"PrefixThrough","kind":"identifier"}],"url":"\/documentation\/parsing\/prefixthrough"},"doc://co.pointfree.Parsing/documentation/Parsing/UUID":{"abstract":[{"type":"text","text":"A parser that consumes a "},{"type":"codeVoice","code":"UUID"},{"type":"text","text":" value from the beginning of a string."}],"title":"UUID","type":"topic","role":"article","kind":"article","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/UUID","url":"\/documentation\/parsing\/uuid"},"doc://co.pointfree.Parsing/documentation/Parsing/Optionally/parse(_:)":{"abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"title":"parse(_:)","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Optionally\/parse(_:)","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Input"},{"kind":"text","text":") -> "},{"kind":"typeIdentifier","text":"Wrapped"},{"kind":"text","text":"."},{"kind":"typeIdentifier","text":"Output"},{"kind":"text","text":"?"}],"url":"\/documentation\/parsing\/optionally\/parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Fail":{"abstract":[{"type":"text","text":"A parser that always fails, no matter the input."}],"title":"Fail","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Fail","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Fail","kind":"identifier"}],"navigatorTitle":[{"text":"Fail","kind":"identifier"}],"url":"\/documentation\/parsing\/fail"},"doc://co.pointfree.Parsing/documentation/Parsing/Whitespace":{"abstract":[{"type":"text","text":"A parser that consumes all ASCII whitespace from the beginning of the input."}],"title":"Whitespace","type":"topic","role":"symbol","kind":"symbol","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Whitespace","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Whitespace","kind":"identifier"}],"navigatorTitle":[{"text":"Whitespace","kind":"identifier"}],"url":"\/documentation\/parsing\/whitespace"},"doc://co.pointfree.Parsing/documentation/Parsing/OneOf":{"fragments":[{"kind":"keyword","text":"struct"},{"kind":"text","text":" "},{"kind":"identifier","text":"OneOf"}],"url":"\/documentation\/parsing\/oneof","navigatorTitle":[{"kind":"identifier","text":"OneOf"}],"title":"OneOf","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/OneOf","type":"topic","role":"symbol","kind":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers till one succeeds.","type":"text"}]}}}