{"abstract":[{"text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically","type":"text"},{"text":" ","type":"text"},{"text":"you only call this from other ","type":"text"},{"type":"codeVoice","code":"Parser"},{"text":" conformances, not when you want to parse a concrete","type":"text"},{"text":" ","type":"text"},{"text":"input.","type":"text"}],"hierarchy":{"paths":[["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVOO"]]},"schemaVersion":{"major":0,"minor":2,"patch":0},"metadata":{"symbolKind":"method","role":"symbol","roleHeading":"Instance Method","fragments":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"P0","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> (","kind":"text"},{"text":"P4","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P5","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"parse(_:)","modules":[{"name":"Parsing"}],"externalID":"s:7Parsing13ParserBuilderO9ZipVVVVOOV5parsey6OutputQy2__AGQy3_t5InputQzzKF"},"identifier":{"url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVOO\/parse(_:)","interfaceLanguage":"swift"},"kind":"symbol","sections":[],"variants":[{"paths":["\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/parse(_:)"],"traits":[{"interfaceLanguage":"swift"}]}],"primaryContentSections":[{"declarations":[{"tokens":[{"text":"func","kind":"keyword"},{"text":" ","kind":"text"},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"_","kind":"externalParam"},{"text":" ","kind":"text"},{"text":"input","kind":"internalParam"},{"text":": ","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"P0","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> (","kind":"text"},{"text":"P4","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P5","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"languages":["swift"],"platforms":["Linux"]}],"kind":"declarations"},{"content":[{"type":"heading","anchor":"return-value","level":2,"text":"Return Value"},{"inlineContent":[{"type":"text","text":"A more well-structured value parsed from the given input."}],"type":"paragraph"}],"kind":"content"},{"kind":"parameters","parameters":[{"name":"input","content":[{"inlineContent":[{"text":"A nebulous, mutable piece of data to be incrementally parsed.","type":"text"}],"type":"paragraph"}]}]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVVOO/parse(_:)":{"role":"symbol","abstract":[{"type":"text","text":"Attempts to parse a nebulous piece of data into something more well-structured. Typically"},{"type":"text","text":" "},{"type":"text","text":"you only call this from other "},{"type":"codeVoice","code":"Parser"},{"type":"text","text":" conformances, not when you want to parse a concrete"},{"type":"text","text":" "},{"type":"text","text":"input."}],"type":"topic","url":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo\/parse(_:)","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVOO\/parse(_:)","kind":"symbol","fragments":[{"kind":"keyword","text":"func"},{"kind":"text","text":" "},{"text":"parse","kind":"identifier"},{"text":"(","kind":"text"},{"text":"inout","kind":"keyword"},{"text":" ","kind":"text"},{"text":"P0","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Input","kind":"typeIdentifier"},{"text":") ","kind":"text"},{"text":"rethrows","kind":"keyword"},{"text":" -> (","kind":"text"},{"text":"P4","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":", ","kind":"text"},{"text":"P5","kind":"typeIdentifier"},{"text":".","kind":"text"},{"text":"Output","kind":"typeIdentifier"},{"text":")","kind":"text"}],"title":"parse(_:)"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","kind":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","role":"collection","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/Parse":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parse","type":"topic","kind":"symbol","abstract":[{"text":"A parser that attempts to run a number of parsers to accumulate their outputs.","type":"text"}],"title":"Parse","role":"symbol","url":"\/documentation\/parsing\/parse","navigatorTitle":[{"text":"Parse","kind":"identifier"}],"fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parse","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder","type":"topic","kind":"symbol","abstract":[{"text":"A custom parameter attribute that constructs parsers from closures. The constructed parser","type":"text"},{"type":"text","text":" "},{"type":"text","text":"runs a number of parsers, one after the other, and accumulates their outputs."}],"title":"ParserBuilder","role":"symbol","url":"\/documentation\/parsing\/parserbuilder","navigatorTitle":[{"text":"ParserBuilder","kind":"identifier"}],"fragments":[{"text":"enum","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ParserBuilder","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/ParserBuilder/ZipVVVVOO":{"abstract":[],"kind":"symbol","type":"topic","navigatorTitle":[{"text":"ZipVVVVOO","kind":"identifier"}],"title":"ParserBuilder.ZipVVVVOO","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ParserBuilder\/ZipVVVVOO","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"text":"ZipVVVVOO","kind":"identifier"}],"role":"symbol","url":"\/documentation\/parsing\/parserbuilder\/zipvvvvoo"}}}