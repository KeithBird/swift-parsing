{"topicSections":[{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking"],"title":"Articles"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser"],"title":"Protocols"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"],"title":"Type Aliases"},{"identifiers":["doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers"],"title":"Enumerations"}],"primaryContentSections":[{"kind":"content","content":[{"anchor":"Additional-Resources","text":"Additional Resources","type":"heading","level":2},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/","isActive":true,"type":"reference"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","isActive":true}]}]},{"content":[{"inlineContent":[{"identifier":"https:\/\/www.pointfree.co\/collections\/parsing","type":"reference","isActive":true}],"type":"paragraph"}]}]},{"anchor":"Overview","text":"Overview","type":"heading","level":2},{"type":"paragraph","inlineContent":[{"text":"Parsing with this library is performed by listing out many small parsers that describe how to","type":"text"},{"text":" ","type":"text"},{"text":"incrementally consume small bits from the beginning of an input string. For example, suppose you","type":"text"},{"text":" ","type":"text"},{"text":"have a string that holds some user data that you want to parse into an array of ","type":"text"},{"type":"codeVoice","code":"User"},{"text":"s:","type":"text"}]},{"syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,true","\"\"\"","","struct User {","  var id: Int","  var name: String","  var isAdmin: Bool","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"A parser can be constructed for transforming the input string into an array of users in succinct","type":"text"},{"text":" ","type":"text"},{"text":"and fluent API:","type":"text"}]},{"syntax":"swift","code":["let user = Parse(User.init) {","  Int.parser()","  \",\"","  Prefix { $0 != \",\" }.map(String.init)","  \",\"","  Bool.parser()","}","","let users = Many {","  user","} separator: {","  \"\\n\"","} terminator: {","  End()","}","","try users.parse(input)  \/\/ [User(id: 1, name: \"Blob\", isAdmin: true), ...]"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"This says that to parse a user we:"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Parse and consume an integer from the beginning of the input"}],"type":"paragraph"}]},{"content":[{"inlineContent":[{"type":"text","text":"then a comma"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"then everything up to the next comma"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"then another comma","type":"text"}]}]},{"content":[{"inlineContent":[{"text":"and finally a boolean.","type":"text"}],"type":"paragraph"}]}]},{"type":"paragraph","inlineContent":[{"text":"And to parse an entire array of users we:","type":"text"}]},{"type":"unorderedList","items":[{"content":[{"inlineContent":[{"type":"text","text":"Run the "},{"type":"codeVoice","code":"user"},{"type":"text","text":" parser many times"}],"type":"paragraph"}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"between each invocation of "},{"type":"codeVoice","code":"user"},{"type":"text","text":" we run the separator parser to consume a newline"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"and once the ","type":"text"},{"type":"codeVoice","code":"user"},{"text":" and separator parsers have consumed all they can we run the terminator","type":"text"},{"text":" ","type":"text"},{"text":"parser to verify there is no more input to consume.","type":"text"}]}]}]},{"type":"paragraph","inlineContent":[{"text":"Further, if the input is malformed, like say we mistyped one of the booleans, then the parser emits","type":"text"},{"text":" ","type":"text"},{"text":"an error that describes exactly what went wrong:","type":"text"}]},{"syntax":"swift","code":["var input = \"\"\"","1,Blob,true","2,Blob Jr.,false","3,Blob Sr.,tru","\"\"\"","","try users.parse(input)","","\/\/ error: unexpected input","\/\/  --> input:3:11","\/\/ 3 | 3,Blob Jr,tru","\/\/   |           ^ expected \"true\" or \"false\""],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"type":"text","text":"Thatâ€™s the basics of parsing a simple string format, but there are a lot more operators and tricks"},{"type":"text","text":" "},{"type":"text","text":"to learn in order to performantly parse larger inputs."}]}]}],"metadata":{"modules":[{"name":"Parsing"}],"title":"Parsing","role":"collection","roleHeading":"Framework","externalID":"Parsing","symbolKind":"module"},"kind":"symbol","sections":[],"hierarchy":{"paths":[[]]},"abstract":[{"type":"text","text":"A library for turning nebulous data into well-structured data, with a focus on composition,"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"seeAlsoSections":[{"abstract":[{"type":"text","text":"The collecton of videos from "},{"identifier":"https:\/\/www.pointfree.co","type":"reference","isActive":true},{"type":"text","text":" that dive deep into the"},{"type":"text","text":" "},{"text":"development of the Parsing library.","type":"text"}],"identifiers":["https:\/\/www.pointfree.co\/collections\/parsing"],"title":"Related Documentation"}],"schemaVersion":{"major":0,"minor":2,"patch":0},"identifier":{"interfaceLanguage":"swift","url":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing"},"variants":[{"traits":[{"interfaceLanguage":"swift"}],"paths":["\/documentation\/parsing"]}],"references":{"doc://co.pointfree.Parsing/documentation/Parsing/Design":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Design","kind":"article","url":"\/documentation\/parsing\/design","role":"article","type":"topic","title":"Design","abstract":[{"text":"Learn how the library is designed, including its use of protocols, result builders and operators.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/GettingStarted":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/GettingStarted","kind":"article","url":"\/documentation\/parsing\/gettingstarted","role":"article","type":"topic","title":"Getting Started","abstract":[{"text":"Learn how to integrate Parsing into your project and write your first parser.","type":"text"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Parsers":{"fragments":[{"kind":"keyword","text":"enum"},{"kind":"text","text":" "},{"kind":"identifier","text":"Parsers"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parsers","title":"Parsers","kind":"symbol","type":"topic","role":"symbol","abstract":[{"type":"text","text":"A namespace for types that serve as parsers."}],"navigatorTitle":[{"kind":"identifier","text":"Parsers"}],"url":"\/documentation\/parsing\/parsers"},"https://www.pointfree.co/collections/parsing":{"title":"Point-Free Videos","url":"https:\/\/www.pointfree.co\/collections\/parsing","titleInlineContent":[{"text":"Point-Free Videos","type":"text"}],"type":"link","identifier":"https:\/\/www.pointfree.co\/collections\/parsing"},"https://github.com/pointfreeco/swift-parsing/discussions":{"title":"Discussions","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions","titleInlineContent":[{"text":"Discussions","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/discussions"},"https://github.com/pointfreeco/swift-parsing/":{"title":"GitHub Repo","url":"https:\/\/github.com\/pointfreeco\/swift-parsing\/","titleInlineContent":[{"text":"GitHub Repo","type":"text"}],"type":"link","identifier":"https:\/\/github.com\/pointfreeco\/swift-parsing\/"},"doc://co.pointfree.Parsing/documentation/Parsing/Backtracking":{"kind":"article","role":"article","url":"\/documentation\/parsing\/backtracking","identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Backtracking","abstract":[{"text":"Learn what backtracking is, how it affects the performance of your parsers, and how to avoid it when","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"unnecessary."}],"title":"Backtracking","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing","type":"topic","kind":"symbol","abstract":[{"text":"A library for turning nebulous data into well-structured data, with a focus on composition,","type":"text"},{"type":"text","text":" "},{"type":"text","text":"performance, generality, and ergonomics."}],"title":"Parsing","role":"collection","url":"\/documentation\/parsing"},"doc://co.pointfree.Parsing/documentation/Parsing/StringAbstractions":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/StringAbstractions","title":"String Abstractions","kind":"article","abstract":[{"text":"Learn how to write parsers on different levels of string abstractions, giving you the ability to","type":"text"},{"text":" ","type":"text"},{"text":"trade performance for correctness where needed.","type":"text"}],"role":"article","url":"\/documentation\/parsing\/stringabstractions","type":"topic"},"doc://co.pointfree.Parsing/documentation/Parsing/Parser":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Parser","type":"topic","kind":"symbol","abstract":[{"text":"Declares a type that can parse an ","type":"text"},{"type":"codeVoice","code":"Input"},{"type":"text","text":" value into an "},{"type":"codeVoice","code":"Output"},{"type":"text","text":" value."}],"title":"Parser","role":"symbol","url":"\/documentation\/parsing\/parser","navigatorTitle":[{"text":"Parser","kind":"identifier"}],"fragments":[{"text":"protocol","kind":"keyword"},{"text":" ","kind":"text"},{"text":"Parser","kind":"identifier"}]},"doc://co.pointfree.Parsing/documentation/Parsing/Conditional":{"url":"\/documentation\/parsing\/conditional","type":"topic","deprecated":true,"kind":"symbol","fragments":[{"kind":"keyword","text":"typealias"},{"kind":"text","text":" "},{"kind":"identifier","text":"Conditional"}],"abstract":[],"role":"symbol","title":"Conditional","navigatorTitle":[{"kind":"identifier","text":"Conditional"}],"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/Conditional"},"doc://co.pointfree.Parsing/documentation/Parsing/ErrorMessages":{"identifier":"doc:\/\/co.pointfree.Parsing\/documentation\/Parsing\/ErrorMessages","kind":"article","url":"\/documentation\/parsing\/errormessages","role":"article","type":"topic","title":"Error messages","abstract":[{"text":"Learn how the library reports parsing errors and how to integrate your own custom error messages","type":"text"},{"text":" ","type":"text"},{"text":"into parsers.","type":"text"}]}}}